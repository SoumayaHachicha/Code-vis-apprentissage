import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np

# Chargement du mod√®le CNN (version am√©lior√©e)
model = tf.keras.models.load_model("mon_cnn_amelior√©.h5")  # Nom du mod√®le mis √† jour
IMG_SIZE = (224, 224)  # Doit MATCHER la taille d'entra√Ænement

# V√©rifier l'ordre des classes selon votre dataset
labels = {0: "Conforme", 1: "Non conforme"}  # Ordre √† confirmer

def main():
    st.title("Contr√¥le Qualit√© : Vis")
    st.write("OkVisFactory - Diagnostic de qualit√© automatis√©")

    uploaded_file = st.file_uploader("Chargez une image de vis (.jpg/.png)", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        try:
            # Chargement et conversion RGB
            image = Image.open(uploaded_file).convert("RGB")
            st.image(image, caption="Vis analys√©e", use_column_width=True)

            # Pr√©traitement optimis√©
            image_resized = image.resize(IMG_SIZE)
            image_array = np.array(image_resized, dtype=np.float32) / 255.0
            image_array = np.expand_dims(image_array, axis=0)

            # Pr√©diction avec v√©rification
            if model.input_shape[1:3] != IMG_SIZE:
                raise ValueError(f"Taille d'image incompatible. Attendu : {model.input_shape[1:3]}")

            predictions = model.predict(image_array)
            predicted_class = np.argmax(predictions[0])
            confidence = predictions[0][predicted_class] * 100

            # Affichage professionnel
            st.markdown(f"**R√©sultat :** `{labels[predicted_class]}`")
            st.metric("Confiance du mod√®le", f"{confidence:.2f}%")

            if labels[predicted_class] == "Conforme":
                st.success("‚úÖ Vis conforme aux standards qualit√©")
            else:
                st.error("üö® D√©faut critique d√©tect√© - Rejet automatique")

        except Exception as e:
            st.error(f"ERREUR : {str(e)}")
            st.info("Astuce : Utilisez des images 224x224 pixels en format RGB")

if __name__ == "__main__":
    main()